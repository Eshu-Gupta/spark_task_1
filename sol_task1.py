# -*- coding: utf-8 -*-
"""Sol_Task1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S0j6mD2Et3H6zoUOO5t2dTfP0NkKhxRC

## **The Sparks Foundation: Data Science & Business Analytics Internship**

### **Task1: Prediction using Unupervised ML**

Task 1: Predict percentage of a student based on no. of study hours

**Importing** **Libraries**
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

"""**Read** **Dataset**"""

url = "http://bit.ly/w-data"
data = pd.read_csv(url)
data.head()

"""**Plotting distribution of scores using Matplotlib**"""

data.plot(x='Hours', y='Scores', style='yo')
plt.title('Hours Studies vs Percentage Score')
plt.xlabel('Hours Studied')
plt.ylabel('Percentage Score')
plt.show()

"""From the graph, we can conclude that there is a positive linear relation, therefore we can use linear regression to predict the data"""

X = data.iloc[:, :-1].values
y = data.iloc[:, 1].values

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

"""Training Data"""

from sklearn.linear_model import LinearRegression
lin_regressor = LinearRegression()
lin_regressor.fit(X_train, y_train)

print('Training complete')

# Plotting the regression line
line = lin_regressor.coef_*X+lin_regressor.intercept_

# Plotting for the test data
plt.plot(X, y,'yo')
plt.plot(X, line);
plt.title('Hours Studied vs Percentage Scores')
plt.xlabel('Hours Studied')
plt.ylabel('Scores Obtained')
plt.show()

"""Making Predictions"""

print(X_test)

y_pred=lin_regressor.predict(X_test)
print(y_pred)

# Comparing Actual vs Predicted
df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
df

pred_ans=lin_regressor.predict([[9.25]])
print("No of Hours = 9.25")
print("Predicted Score = {}".format(pred_ans[0]))

"""**Evaluate the** **Model**"""

from sklearn import metrics
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))